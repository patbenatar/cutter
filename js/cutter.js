// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Cutter = (function(_super) {

    __extends(Cutter, _super);

    function Cutter() {
      this._onCropChange = __bind(this._onCropChange, this);

      this._onShowoffUpdate = __bind(this._onShowoffUpdate, this);
      return Cutter.__super__.constructor.apply(this, arguments);
    }

    _.extend(Cutter, Backbone.Events);

    Cutter.prototype.settings = {
      onNoBrowserSupport: null,
      aspectRatio: null,
      geometryFields: {
        x: null,
        y: null,
        w: null,
        h: null
      }
    };

    Cutter.prototype.crop = null;

    Cutter.prototype.$img = null;

    Cutter.prototype.$container = null;

    Cutter.prototype.initialize = function(options) {
      var _this = this;
      this.options = $.extend({}, this.settings, options);
      delete this.options.el;
      this.$container = this.$(".js-image_container");
      this.$img = this.$(".js-image");
      this.$container.css("position", "relative");
      return this.$("input[type=file]").showoff({
        destination: this.$img,
        onNoBrowserSupport: function() {
          if (_this.options.onNoBrowserSupport) {
            return _this.options.onNoBrowserSupport();
          }
        },
        onInvalidFiletype: function(filetype) {
          return _this.trigger("invalidFiletype", filetype);
        },
        onFileReaderError: function(error) {
          return _this.trigger("fileReaderError", error);
        },
        onDestinationUpdate: this._onShowoffUpdate
      });
    };

    Cutter.prototype._onShowoffUpdate = function() {
      var _this = this;
      return setTimeout(function() {
        var cropOptions, height, width;
        _this.trigger("destinationUpdate");
        _this.$container.show();
        if (_this.crop) {
          _this.crop.update();
          return;
        }
        cropOptions = {
          instance: true,
          handles: true,
          onInit: _this._onCropChange,
          onSelectChange: _this._onCropChange,
          parent: _this.$container
        };
        width = _this.$img.width();
        height = Math.round(_this.$img.width() / _this.options.aspectRatio);
        if (height > _this.$img.height()) {
          height = _this.$img.height();
          width = Math.round(height * _this.options.aspectRatio);
        }
        if (_this.options.aspectRatio) {
          $.extend(cropOptions, cropOptions, {
            aspectRatio: "" + _this.options.aspectRatio + ":1",
            x1: 0,
            y1: 0,
            x2: width,
            y2: height
          });
        }
        return _this.crop = _this.$img.imgAreaSelect(cropOptions);
      }, 50);
    };

    Cutter.prototype._onCropChange = function(img, event) {
      var $el, coord, height, relativeCoords, width, _ref, _results;
      width = this.$img.width();
      height = this.$img.height();
      relativeCoords = {
        w: event.width / width,
        h: event.height / height,
        x: event.x1 / width,
        y: event.y1 / height
      };
      _ref = this.options.geometryFields;
      _results = [];
      for (coord in _ref) {
        $el = _ref[coord];
        _results.push($el.val(relativeCoords[coord]));
      }
      return _results;
    };

    return Cutter;

  })(Backbone.View);

}).call(this);
